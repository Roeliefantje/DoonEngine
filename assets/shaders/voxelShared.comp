//----------------------------------------------------------BEGIN-SHARED----------------------------------------------------------//

#define CHUNK_SIZE ivec3(8, 8, 8)                        //size of each individual chunk
#define INV_CHUNK_SIZE vec3(0.125, 0.125, 0.125)         //1 / CHUNK_SIZE, precomputed
#define HALF_INV_CHUNK_SIZE vec3(0.0625, 0.0625, 0.0625) //1 / 2 * CHUNK_SIZE, precomputed

#define EPSILON 0.0001 //to fix floating point error

uniform uvec3 mapSize;

uniform bool useCubemap;        //whether a cubemap should be used to sample for the sky color
uniform samplerCube skyCubemap; //if useCubemap is true, the cubemap to sample from
uniform vec3 skyGradientBot;    //if useCubemap is false, the color of the bottom of the sky gradient
uniform vec3 skyGradientTop;    //if useCubemap is false, the color of the top of the sky gradient

//--------------------------------------------------------------------------------------------------------------------------------//

//a single voxel
struct Voxel
{
	vec3 normal;       //the direction the voxel points (for lighting calculation)
	uint material;     //the index of this voxel's material
	vec3 albedo;       //the "base color" (percentage of light reflected)

	vec3 specLight;    //the lighting caused by reflecting light rays off of the voxel
	vec3 diffuseLight; //the diffuse lighting of the voxel, caused by multiple light ray bounces
};

//a compressed voxel
struct CompressedVoxel
{
	uint normal;       //layout: normal.x (8 bits)        | normal.y (8 bits)      | normal.z (8 bits)        | material index (8 bits)
	uint albedo;       //layout: albedo.r (8 bits)        | albedo.g (8 bits)      | albedo.b (8 bits)        | specLight.x (8 bits)
	uint specLight;    //layout: specLight.y (8 bits)     | specLight.z (8 bits)   | diffuseLight.x (16 bits)
	uint diffuseLight; //layout: diffuseLight.y (16 bits)                          | diffuseLight.z (16 bits)
};

//a chunk of voxels
struct Chunk
{
	ivec3 pos;               //the chunk's position within the map
	uint numIndirectSamples; //the number of diffuse lighting samples this chunk has taken

	uint partialCounts[3];	 //used to speed up the bitcounting, represents the number of voxels that exist before the 1/4, 1/2, and 3/4 point
	uint bitMask[16];		 //represents the grid of voxels, each bit represents a single voxel
};

//a handle to a Chunk
struct ChunkHandle
{
	uint flags;      //layout: loaded flag (2 bits, 0 = DnE, 1 = unloaded, 2 = loaded, 3 = requested) | visible flag (1 bit)
	uint lastUsed;   //the time since the chunk was last used
	uint voxelIndex; //the starting index of this chunk's voxels
};

//a material, determines how light rays interact with a voxel
struct Material
{
	vec2 padding;       //for alignment

	bool emissive;      //whether or not the voxel emits light

	float opacity;      //the opacity of the voxel
	float refractIndex; //the voxel's refractive index

	float specular;     //what percentage of rays are specular, the other percent are diffuse
	uint reflectType;   //only applies to specular voxels. whether or not they will reflect the sky color
	uint shininess;     //the greater the number, the closer the specular rays are to perfect reflection
};

//--------------------------------------------------------------------------------------------------------------------------------//

//contains the chunk map
layout(std430, binding = 0) restrict buffer mapBuffer
{
	ChunkHandle map[];
};

//contains all of the chunks
layout(std430, binding = 1) restrict buffer chunkBuffer
{
	Chunk chunks[];
};

//contains all of the materials
layout(std140, binding = 2) restrict readonly buffer materialBuffer
{
	Material materials[256];
};

//contains all of the individual voxels
layout(std140, binding = 4) restrict buffer voxelBuffer
{
	CompressedVoxel voxels[];
};

uniform vec3 sunStrength;     //the amount of light the sun emits
uniform vec3 ambientStrength; //the minimum light that every voxel receives

//--------------------------------------------------------------------------------------------------------------------------------//

//decompresses a 4-byte value into 4 1-byte values
uvec4 decode_uint_RGBA(uint val)
{
	uvec4 res;
	res.x = val >> 24;
	res.y = val >> 16;
	res.z = val >> 8;
	res.w = val;
	return res & 0xFF;
}

//compresses 4 1-byte values into a 4-byte value
uint encode_uint_RGBA(uvec4 val)
{
	val = val & 0xFF;
	return val.x << 24 | val.y << 16 | val.z << 8 | val.w;
}

//--------------------------------------------------------------------------------------------------------------------------------//

//returns whether a position is in bounds in the map
bool in_map_bounds(ivec3 pos)
{
	return pos.x < mapSize.x && pos.y < mapSize.y && pos.z < mapSize.z && pos.x >= 0 && pos.y >= 0 && pos.z >= 0;
}

//returns whether a position is in bounds in a chunk
bool in_chunk_bounds(ivec3 pos)
{
	return pos.x < CHUNK_SIZE.x && pos.y < CHUNK_SIZE.y && pos.z < CHUNK_SIZE.z && pos.x >= 0 && pos.y >= 0 && pos.z >= 0;
}

//returns the value of the map at a position
ChunkHandle get_map_tile(ivec3 pos)
{
	uint index = pos.x + mapSize.x * (pos.y + mapSize.y * pos.z);
	if(map[index].lastUsed > 0)
		map[index].lastUsed = 0;

	return map[index];
}

//returns an individual voxel's index in the voxel buffer
uint get_voxel_index(uint chunk, uint mapIndex, ivec3 chunkPos)
{
	uint localIndex = chunkPos.x + CHUNK_SIZE.x * (chunkPos.y + CHUNK_SIZE.y * chunkPos.z);
	uint bitMaskIndex = localIndex >> 5; //index into the bitMask array

	//start at a higher number if further into the chunk:
	uint voxNum = (bitMaskIndex > 3) ? chunks[chunk].partialCounts[(bitMaskIndex >> 2) - 1] : 0;

	for(uint i = bitMaskIndex & ~3; i <= bitMaskIndex; i++)
	{
		//if we are at the final bitMaskIndex, only count bits that come BEFORE the desired voxel:
		uint bits = chunks[chunk].bitMask[i];
		if(i == bitMaskIndex)
			bits &= (1 << (localIndex & 31)) - 1;

		voxNum += bitCount(bits);
	}

	return map[mapIndex].voxelIndex + voxNum;
}

//returns a voxel's position within its chunk given its index offset
ivec3 get_voxel_position(uint chunk, uint voxNum)
{
	uint count = 0; //the number of voxels we have seen already
	uint pos = 0;   //the current position

	//start later on if the desired voxNum is high enough:
	uint startIndex = 0;
	for(int i = 0; i < 3; i++)
	{
		if(chunks[chunk].partialCounts[i] < voxNum)
		{
			count = chunks[chunk].partialCounts[i];
			pos += 128;
			startIndex += 4;
		}
		else
			break;
	}

	voxNum++; //we are trying to find the Nth voxel, so if voxNum is 0 we want the 1st voxel

	for(uint i = startIndex; i < 16; i++)
	{
		if(count == voxNum)
			break;

		uint bitCount = bitCount(chunks[chunk].bitMask[i]);
		if(count + bitCount >= voxNum)
		{
			//if jumping the entire uint is too far, step through bit-by-bit to find the pos
			uint bitNum = 0;
			while(count < voxNum)
			{
				count += (chunks[chunk].bitMask[i] >> bitNum) & 1;
				bitNum++;
				pos++;
			}
		}
		else
		{
			//jump over 32 positions:
			count += bitCount;
			pos += 32;
		}
	}
	pos--;

	//transform position to (x, y, z) if the voxel is found:
	if(count < voxNum)
		return ivec3(-1, -1, -1);
	else	
		return ivec3(pos % 8, (pos / 8) % 8, pos / 64);
}

//returns true if the voxel at the position is solid (not empty)
bool does_voxel_exist(uint chunk, ivec3 chunkPos)
{
	uint index = chunkPos.x + CHUNK_SIZE.x * (chunkPos.y + CHUNK_SIZE.y * chunkPos.z);
	return bool((chunks[chunk].bitMask[index >> 5] >> (index & 31)) & 1);
}

//--------------------------------------------------------------------------------------------------------------------------------//

//decompresses an entire voxel
Voxel decompress_voxel(CompressedVoxel compressed)
{
	Voxel res;

	uvec4 normalRead        = decode_uint_RGBA(compressed.normal);
	uvec4 albedoRead        = decode_uint_RGBA(compressed.albedo);
	uvec4 specLightRead     = decode_uint_RGBA(compressed.specLight);
	uvec4 diffuseLightRead  = decode_uint_RGBA(compressed.diffuseLight);

	uvec3 diffuseUpper = uvec3(specLightRead.z, diffuseLightRead.x, diffuseLightRead.z) << 8;
	uvec3 diffuseLower = uvec3(specLightRead.w, diffuseLightRead.y, diffuseLightRead.w);
	vec3 diffuseLight  = vec3(diffuseUpper | diffuseLower);

	res.normal       = (vec3(normalRead.yzw) * 0.00392156862 - 0.5) * 2.0;
	res.material     = normalRead.x;
	res.albedo       = vec3(albedoRead.xyz) * 0.00392156862;
	res.diffuseLight = vec3(diffuseLight * 0.0000152590219);
	res.specLight    = vec3(albedoRead.w, specLightRead.xy) * 0.00392156862;

	return res;
}

//--------------------------------------------------------------------------------------------------------------------------------//

//returns the distance a ray has to travel to intersect an AABB
vec2 intersect_AABB(vec3 invRayDir, vec3 rayPos, vec3 boxMin, vec3 boxMax)
{
    vec3 tMin = (boxMin - rayPos) * invRayDir;
    vec3 tMax = (boxMax - rayPos) * invRayDir;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar  = min(min(t2.x, t2.y), t2.z);

    return vec2(tNear, tFar);
}

//returns the normal of an AABB at a point
vec3 normal_AABB(vec3 intersectPos, vec3 boxMin, vec3 boxMax)
{
	vec3 c = (boxMin + boxMax) * 0.5;
	vec3 p = intersectPos - c;
	vec3 d = (boxMax - boxMin) * 0.5;
	const float bias = 1.0 + EPSILON;

	return normalize(trunc(p / d * bias));
}

//--------------------------------------------------------------------------------------------------------------------------------//

//returns the sky color for a given ray direction
vec3 sky_color(vec3 rayDir)
{
	if(useCubemap)
		return texture(skyCubemap, rayDir).xyz;
	else
		return mix(skyGradientBot, skyGradientTop, rayDir.y * 0.5 + 1);
}

//--------------------------------------------------------------------------------------------------------------------------------//

//initializes all of the variables for the DDA algorithm
void init_DDA(vec3 rayDir, vec3 invRayDir, vec3 rayPos, out ivec3 pos, out vec3 deltaDist, out ivec3 rayStep, out vec3 sideDist)
{
	pos = ivec3(floor(rayPos));    //the position within the chunk
	deltaDist = abs(invRayDir);    //the distance the ray has to travel to move one unit in each direction
	rayStep = ivec3(sign(rayDir)); //the direction the ray steps
	sideDist = (sign(rayDir) * (pos - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; //the total distance the ray has to travel to reach one additional unit in each direction
}

//steps through one tile with the DDA algorithm
void iterate_DDA(vec3 deltaDist, ivec3 rayStep, inout vec3 sideDist, inout ivec3 mapPos, out vec3 normal)
{
	//branchless dda code from here: https://www.shadertoy.com/view/4dX3zl

	bvec3 mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));
	sideDist += vec3(mask) * deltaDist;
	mapPos += ivec3(mask) * rayStep;
	normal = vec3(mask) * -rayStep;
}

//--------------------------------------------------------------------------------------------------------------------------------//

bool enableRefraction = false;

uint lastVoxID = 255;       //the last hit voxel's albedo and material, used to determine if a new transparent "block" was hit
float lastVoxRefract = 1.0; //the last hit voxel's refraction index, used to determine how much we need to refract

//steps a ray through a chunk, returns true if a voxel was hit
bool step_chunk(uint chunk, ivec3 mapPos, inout vec3 rayDir, inout vec3 invRayDir, inout vec3 rayPos, bool ignoreFirst, inout vec3 hitNormal, out Voxel voxel, inout vec3 colorAdd, inout float colorMult, out bool refracted) //steps a ray through a chunk, returns true if something was hit
{
	uint mapIndex = mapPos.x + mapSize.x * (mapPos.y + mapSize.y * mapPos.z);
	refracted = false;

	ivec3 pos;
	vec3 deltaDist;
	ivec3 rayStep;
	vec3 sideDist;
	vec3 lastSideDist = vec3(0.0);
	init_DDA(rayDir, invRayDir, rayPos, pos, deltaDist, rayStep, sideDist);

	while(in_chunk_bounds(pos))
	{
		//check if a solid voxel has been hit:
		if (does_voxel_exist(chunk, pos) && !ignoreFirst)
		{
			//decompress the voxel and find its material:
			CompressedVoxel compressed = voxels[get_voxel_index(chunk, mapIndex, pos)];
			voxel = decompress_voxel(compressed);

			Material material = materials[voxel.material];
			uint thisVoxID = (compressed.albedo & 0xFFFFFF00) | (compressed.normal >> 24);

			if(material.opacity == 1.0)
			{
				//return the position
				rayPos += rayDir * (min(min(lastSideDist.x, lastSideDist.y), lastSideDist.z) + EPSILON);
				return true;
			}
			else if(lastVoxID != thisVoxID) //if the voxel is transparent, add its transparency multiplier (only if it is a "new" voxel)
			{
				colorAdd += colorMult * material.opacity * voxel.albedo * sunStrength;
				colorMult *= 1.0 - material.opacity;

				//refract if enabled:
				float rayDist = min(min(lastSideDist.x, lastSideDist.y), lastSideDist.z);
				if(enableRefraction && rayDist > 0.0)
				{
					refracted = true;
					rayPos += rayDir * (rayDist + EPSILON);
						
					vec3 normal = dot(voxel.normal, rayDir) < 0.0 ? normalize(voxel.normal) : hitNormal;
					rayDir = refract(rayDir, normal, lastVoxRefract / material.refractIndex);
					invRayDir = 1 / rayDir;

					init_DDA(rayDir, invRayDir, rayPos, pos, deltaDist, rayStep, sideDist);
					lastSideDist = vec3(0.0);
				}

				lastVoxID = thisVoxID;
				lastVoxRefract = material.refractIndex;
			}
		}
		else if(lastVoxID != 255)
		{
			//refract if enabled:
			if(enableRefraction)
			{
				refracted = true;
				rayPos += rayDir * (min(min(lastSideDist.x, lastSideDist.y), lastSideDist.z) + EPSILON);
				
				vec3 oldRayDir = rayDir;
				vec3 normal = dot(-voxel.normal, rayDir) < 0.0 ? normalize(-voxel.normal) : hitNormal;
				rayDir = refract(rayDir, normal, lastVoxRefract);
				if(rayDir == vec3(0.0)) //total internal reflection causes too much lag (rays bounce too much)
					rayDir = oldRayDir;
				invRayDir = 1 / rayDir;

				init_DDA(rayDir, invRayDir, rayPos, pos, deltaDist, rayStep, sideDist);
				lastSideDist = vec3(0.0);
			}

			lastVoxID = 255;
			lastVoxRefract = 1.0;
		}

		//iterate the dda algorithm:
		lastSideDist = sideDist;
		iterate_DDA(deltaDist, rayStep, sideDist, pos, hitNormal);
		ignoreFirst = false;
	}

	return false;
}

//steps a ray through the map, returns true if a voxel was hit
bool step_map(inout vec3 rayDir, vec3 invRayDir, inout vec3 rayPos, bool ignoreFirst, inout vec3 hitNormal, out Voxel voxel, out vec3 colorAdd, out float colorMult)
{
	bool requested = false;	//we only want to requst 1 chunk per ray to avoid requeting occluded chunks

	colorAdd = vec3(0.0); //added to the final color to account for transparency
	colorMult = 1.0;      //multiplied with the final color to account for transparency

	ivec3 pos;
	vec3 deltaDist;
	ivec3 rayStep;
	vec3 sideDist;
	vec3 lastSideDist = vec3(0.0);
	init_DDA(rayDir, invRayDir, rayPos, pos, deltaDist, rayStep, sideDist);

	while(in_map_bounds(pos))
	{
		//check if a solid chunk has been hit:
		ChunkHandle mapTile = get_map_tile(pos);
		if ((mapTile.flags & 3) == 2)
		{
			vec3 updatedRayPos = rayPos + rayDir * (min(min(lastSideDist.x, lastSideDist.y), lastSideDist.z) - EPSILON);
			vec3 chunkRayPos = (updatedRayPos - pos) * CHUNK_SIZE;
			chunkRayPos = clamp(chunkRayPos, vec3(EPSILON), CHUNK_SIZE - EPSILON); //try to reduce noise. TODO: remove noise entirely

			//step through the chunk:
			bool refracted;
			if(step_chunk(mapTile.flags >> 4, pos, rayDir, invRayDir, chunkRayPos, ignoreFirst, hitNormal, voxel, colorAdd, colorMult, refracted))
			{
				rayPos = pos + chunkRayPos * INV_CHUNK_SIZE;
				return true;
			}

			if(refracted)
			{
				rayPos = pos + chunkRayPos * INV_CHUNK_SIZE;
				init_DDA(rayDir, invRayDir, rayPos, pos, deltaDist, rayStep, sideDist);
				lastSideDist = vec3(0.0);
			}
		}
		else if(!requested && (mapTile.flags & 3) != 0)
		{
			uint index = pos.x + mapSize.x * (pos.y + mapSize.y * pos.z);
			map[index].flags = 3;
			requested = true;
		}

		//iterate the dda algorithm:
		lastSideDist = sideDist;
		iterate_DDA(deltaDist, rayStep, sideDist, pos, hitNormal);
		ignoreFirst = false;
	}

	return false;
}

//-----------------------------------------------------------END-SHARED-----------------------------------------------------------//
