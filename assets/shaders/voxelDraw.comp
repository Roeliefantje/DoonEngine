//INCLUDES "voxelShared.comp"
#version 430 core
#define GAMMA 2.2
#define INV_GAMMA 0.4545 //for gamma correction (1 / 2.2)
#line 5

layout(local_size_x = 16, local_size_y = 16) in;          //16x16 local group size
layout(rgba32f, binding = 0) uniform image2D colorOutput; //the color output texture

//--------------------------------------------------------------------------------------------------------------------------------//

uniform sampler2D colorSample;   //the color of any rasterized objects
uniform sampler2D depthSample;   //the depth of any rasterized objects

uniform uint viewMode;           //what is displayed, 0 = lighting, 1 = albedo, 2 = diffuse light, 3 - specular light, 4 = normals
uniform bool composeRasterized;  //whether or not this scene is being composed with rasterized objects

uniform mat4 invViewMat;         //the inverse of the view matrix used for rasterization
uniform mat4 invCenteredViewMat; //the inverse of the view matrix (without translation) used for rasterization
uniform mat4 invProjectionMat;   //the inverse of the projection matrix used for rasterization

//--------------------------------------------------------------------------------------------------------------------------------//

vec3 background_color(float maxDepth, vec2 texCoords, vec3 rayDir)
{
	if(maxDepth < 0.0)
		return pow(sky_color(rayDir), vec3(GAMMA));
	else
		return texture(colorSample, texCoords).xyz;
}

vec3 voxel_color(Voxel vox, vec3 colorAdd, float colorMult, vec3 hitNormal)
{
	Material material = materials[vox.material];
	vox.specLight    *= material.specular;
	vox.diffuseLight *= 1.0 - material.specular;

	switch(viewMode)
	{
	case 0: //total lighting
	{	
		vec3 solidColor;
		if(material.emissive)
			solidColor = vox.albedo;
		else
			solidColor = vox.diffuseLight * vox.albedo + vox.specLight;

		return solidColor * colorMult + colorAdd;
	}
	case 1: //albedo
		return vox.albedo;
	case 2: //diffuse light
		return material.emissive ? vox.albedo : vox.diffuseLight;
	case 3: //specular light
		return material.emissive ? vox.albedo : vox.specLight;
	case 4: //per-voxel normal
		return abs(vox.normal);
	case 5: //face normal
		return abs(hitNormal);
	}
}

void main()
{
	enableRefraction = true;

	Voxel finalVoxel;       //the final voxel that is hit
	Material finalMaterial; //the material of the final voxel hit
	vec3 finalColorAdd;     //added to the final color to account for transparency
	float finalColorMult;   //multiplied with the final color to account for transparency
	vec3 finalColor;        //the final color that gets written to the texture
	float finalDepth;       //the final depth of ray from the camera

	//calculate ray position and direction:
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 screenPos = coords / vec2(imageSize(colorOutput)) * 2.0 - 1.0;
	vec2 texCoords = vec2(coords) / vec2(textureSize(colorSample, 0));

	vec3 rayPos = (invViewMat * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	vec3 orgRayPos = rayPos;
	vec3 rayDir = normalize((invCenteredViewMat * invProjectionMat * vec4(screenPos, 0.0, 1.0)).xyz) + EPSILON;
	vec3 orgRayDir = rayDir;
	vec3 invRayDir = 1.0 / rayDir;

	float maxDepth;
	if(composeRasterized)
	{
		maxDepth = texture(depthSample, texCoords).x * 2.0 - 1.0;

		if(maxDepth < 1.0) //if far clip plane not hit
		{
			vec4 clipSpacePos = vec4(screenPos, maxDepth, 1.0);
			vec4 viewSpacePos = invProjectionMat * clipSpacePos;
			viewSpacePos /= viewSpacePos.w;
			maxDepth = length(viewSpacePos.xyz);
		}
		else
			maxDepth = -1.0; //if maxDepth is negative, it will not be tested
	}
	else
		maxDepth = -1.0;

	//check if ray hits the map at all:
	vec2 intersection = intersect_AABB(invRayDir, rayPos, vec3(0.0), mapSize);

	if(intersection.x > intersection.y || intersection.y < 0) //make sky color if no intersection at all
	{
		finalColor = background_color(maxDepth, texCoords, rayDir);
	}
	else //if the map is hit, step through it
	{
		if(intersection.x > 0) //only increment rayPos if outside the box
			rayPos += rayDir * (intersection.x + EPSILON);
		vec3 finalNormal = normal_AABB(rayPos, vec3(0.0), mapSize);

		if(step_map(rayDir, invRayDir, rayPos, false, finalNormal, finalVoxel, finalColorAdd, finalColorMult))
		{
			//set chunk to visible:
			uvec3 mapPos = uvec3(floor(rayPos));
			uint index = mapPos.x + mapSize.x * (mapPos.y + mapSize.y * mapPos.z);
			map[index].flags |= 4;

			//get distance to hit voxel
			finalDepth = distance(rayPos, orgRayPos);

			//calculate final color:
			if(maxDepth > 0.0 && finalDepth > maxDepth)
			{
				finalColor = background_color(maxDepth, texCoords, rayDir) * finalColorMult + finalColorAdd;
				finalDepth = maxDepth;
			}
			else
			{
				finalColor = voxel_color(finalVoxel, finalColorAdd, finalColorMult, finalNormal);
			}
		}
		else
		{
			finalColor = background_color(maxDepth, texCoords, rayDir) * finalColorMult + finalColorAdd;
			finalDepth = maxDepth;
		}
	}

	//store final color to texture:
	finalColor = pow(finalColor, vec3(INV_GAMMA)); //gamma correct
	imageStore(colorOutput, coords, vec4(finalColor, finalDepth));
}
