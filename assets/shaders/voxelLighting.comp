//INCLUDES "voxelShared.comp"
#version 430 core
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
#line 5

//holds all of the chunks that are set to have their lighting updated
layout(std430, binding = 3) restrict readonly buffer lightingRequestBuffer
{
	uint chunkIndices[]; //layout: chunk index (28 bits) | voxel offset (4 bits)
};

uniform float time;               //for random seeding
uniform uint numDiffuseSamples;   //the number of diffuse lighting samples to take
uniform uint maxDiffuseSamples;   //the maximum number of diffuse samples that can be stored
uniform uint diffuseBounceLimit;  //the maximum number of times a diffuse light ray can bounce
uniform uint specularBounceLimit; //the maximum number of times a specular light ray can bounce
uniform vec3 sunDir;              //the vector pointing towards the sun, must be normalized
uniform float shadowSoftness;     //how soft the shadows appear

uniform vec3 camPos; //the position of the camera

//a set of points along the unit sphere, sampled for soft shadows and rough reflections:
const vec3 spherePoints[15] = { vec3(0.000000, 1.000000, 0.000000), vec3(-0.379803, 0.857143, 0.347931), vec3(0.061185, 0.714286, -0.697174), vec3(0.499316, 0.571429, 0.651270), vec3(-0.889696, 0.428571, -0.157375), vec3(0.808584, 0.285714, -0.514354), vec3(-0.256942, 0.142857, 0.955810), vec3(-0.460906, 0.000000, -0.887449), vec3(0.929687, -0.142857, 0.339521), vec3(-0.885815, -0.285714, 0.365650), vec3(0.382949, -0.428571, -0.818338), vec3(0.245607, -0.571429, 0.783037), vec3(-0.605521, -0.714286, -0.350913), vec3(0.503065, -0.857143, -0.110596), vec3(-0.000000, -1.000000, 0.000000) };
//TODO: ALLOW MULTIPLE QUALITY OPTIONS FOR THE SPHERE POINTS

//--------------------------------------------------------------------------------------------------------------------------------//

//returns a random float between -1 and 1
float rand(float seed)
{
    return fract(sin(seed) * 43758.5453) * 2.0 - 1.0;
}

//returns a vec2 of random floats between -1 and 1
vec2 rand2(float seed)
{
	return vec2(rand(seed), rand(seed * 2.0));
}

//returns a vec3 of random floats between -1 and 1
vec3 rand3(float seed)
{
	return vec3(rand(seed), rand(seed * 2.0), rand(seed * 3.0));
}

//returns a vec3 of random floats between -1 and 1 that is inside the unit sphere (mag < 1) 
vec3 rand_unit_sphere(float seed)
{
	while(true)
	{
		vec3 point = rand3(seed++);
		if(dot(point, point) >= 1.0)
			continue;

		return point;
	}
}

//--------------------------------------------------------------------------------------------------------------------------------//

//if true, no jittering or randomness will be added to rays to avoid initial noise
bool firstSample = false;

//casts a shadow ray and adds the light it receives to color
void shadow_ray(vec3 rayPos, float seed, inout vec3 color)
{
	Voxel hitVoxel; //not used	
	vec3 colorAdd;
	float colorMult;
	
	vec3 updatedSunDir;
	if(firstSample)
		updatedSunDir = sunDir + EPSILON;
	else
		updatedSunDir = normalize(sunDir * shadowSoftness + rand_unit_sphere(seed)) + EPSILON;

	vec3 tempNormal;
	if(!step_map(updatedSunDir, 1 / updatedSunDir, rayPos, true, tempNormal, hitVoxel, colorAdd, colorMult))
		color += sunStrength * colorMult + colorAdd;
}

//casts out a specular ray and adds the appropriate color to color
void specular_ray(ivec3 mapPos, vec3 normal, vec3 rayPos, vec3 rayDir, vec3 albedo, uint reflectType, inout vec3 color)
{
	Voxel hitVoxel;
	Material hitMaterial;

	vec3 lastPos = rayPos;    //the previous ray position
	vec3 multiplier = albedo; //all of the hit albedos multiplied together

	for(int i = 0; i < specularBounceLimit; i++)
	{
		vec3 colorAdd;
		float colorMult;

		//check if a voxel was hit:
		vec3 tempNormal;
		if(step_map(rayDir, 1 / rayDir, rayPos, true, tempNormal, hitVoxel, colorAdd, colorMult))
		{
			//get position:
			ivec3 hitMapPos = ivec3(rayPos);
			uint thisMapIndex = mapPos.x    + mapSize.x * (mapPos.y    + mapSize.y * mapPos.z   );
			uint hitMapIndex  = hitMapPos.x + mapSize.x * (hitMapPos.y + mapSize.y * hitMapPos.z);
			if((map[thisMapIndex].flags & 4) > 0)
				map[hitMapIndex].flags |= 4;

			//check if hit voxel is adjacent (meant that this voxel is occluded):
			vec3 dist = abs(floor(rayPos * CHUNK_SIZE) - floor(lastPos * CHUNK_SIZE));
			if(dot(dist, dist) > 1)
			{
				hitMaterial = materials[hitVoxel.material];
				hitVoxel.diffuseLight *= 1.0 - hitMaterial.specular;

				if(hitMaterial.emissive)
				{
					color += (hitVoxel.albedo * colorMult + colorAdd) * multiplier * albedo;
					break;
				}
				else
				{
					vec3 hitColor = hitVoxel.diffuseLight * hitVoxel.albedo;
					color += (hitColor * colorMult + colorAdd) * multiplier;

					//reflect ray again if the hit voxel is specular:
					if(hitMaterial.specular > 0.0)
					{
						multiplier *= hitVoxel.albedo * colorMult * hitMaterial.specular;
						reflectType = hitMaterial.reflectType;
						lastPos = rayPos;
						rayDir = reflect(rayDir, hitVoxel.normal);
					}
					else
						break;
				}
			}
			else
				break;
		}
		else if(dot(rayDir, sunDir) > 0.99) //add specular highlight
		{
			color += (sunStrength * colorMult + colorAdd);
			break;
		}
		else //reflect the sky color
		{
			color += ((reflectType == 1 ? sky_color(rayDir) : sunStrength) * colorMult + colorAdd) * multiplier;
			break;
		}
	}
}

//casts a diffuse ray from a voxel and adds the received lighting to color
void diffuse_ray(vec3 normal, vec3 rayPos, Voxel initialVoxel, float seed, inout vec3 color)
{
	Voxel hitVoxel = initialVoxel; //stores the voxel that the ray hits
	vec3 hitNormal = normal;       //stores the normal of the hit voxel
	Material hitMaterial;

	vec3 newColor = vec3(1.0);

	vec3 lastPos = rayPos;
	vec3 lastDir;
	for(int i = 0; i < diffuseBounceLimit; i++)
	{
		vec3 dir;
		if(i > 0 && (rand(seed + diffuseBounceLimit + i) + 1) * 0.5 < hitMaterial.specular)
			dir = normalize(reflect(lastDir, hitNormal) * hitMaterial.shininess + rand_unit_sphere(time + i)); //TODO: check if this actually works i cant tell with my current example scene
		else
			if(firstSample)
				dir = normalize(hitNormal) + EPSILON;
			else
				dir = normalize(hitNormal + rand_unit_sphere(seed + i)) + EPSILON; //randomize the direction, spherical sampling
		
		vec3 colorAdd;
		float colorMult;

		vec3 tempNormal;
		bool hit = step_map(dir, 1 / dir, rayPos, true, tempNormal, hitVoxel, colorAdd, colorMult);  //step through map
		
		hitNormal = hitVoxel.normal;
		hitMaterial = materials[hitVoxel.material];

		if(hit)
		{
			//return if you hit an adjacent voxel (means that this voxel is occluded):
			vec3 dist = abs(floor(lastPos * CHUNK_SIZE) - floor(rayPos * CHUNK_SIZE));
			if(dot(dist, dist) < 1)
				return;

			//multiply the final color:
			if(hitMaterial.emissive)
			{
				color += newColor * (hitVoxel.albedo * colorMult + colorAdd);
				return;
			}
			else
				newColor *= (hitVoxel.albedo * colorMult + colorAdd);
		}
		else
		{
			color += (newColor * max(dot(dir, sunDir), 0.0) * sunStrength * colorMult + colorAdd);
			return;
		}

		lastDir = dir;
	}
}

//--------------------------------------------------------------------------------------------------------------------------------//

void main()
{
	enableRefraction = false; //refraction is too messy to look good at the per-voxel scale

	//find positions:
	uint chunkIndex = chunkIndices[gl_WorkGroupID.x] >> 4;
	ivec3 mapPos = ivec3(chunks[chunkIndex].pos.xyz);
	uint voxNum = gl_LocalInvocationID.x + (chunkIndices[gl_WorkGroupID.x] & 15) * gl_WorkGroupSize.x;
	ivec3 chunkPos = get_voxel_position(chunkIndex, voxNum);

	if(!in_chunk_bounds(chunkPos))
		return;

	uint mapIndex = mapPos.x + mapSize.x * (mapPos.y + mapSize.y * mapPos.z);
	uint voxelIndex = map[mapIndex].voxelIndex + voxNum;
	CompressedVoxel compressed = voxels[voxelIndex];
	Voxel thisVoxel = decompress_voxel(compressed);
	Material thisMaterial = materials[thisVoxel.material];
	float indirectSamples = float(min(chunks[chunkIndex].numIndirectSamples, maxDiffuseSamples)); //have a maximum number of samples to allow the lighting to change quicker

	//sample only along normals directly if newly updated:
	if(indirectSamples == 0)
		firstSample = true;

	//find position of ray (center of the voxel):
	vec3 rayPos = INV_CHUNK_SIZE * chunkPos + mapPos + HALF_INV_CHUNK_SIZE;
	rayPos = rayPos + (HALF_INV_CHUNK_SIZE - vec3(EPSILON)) * thisVoxel.normal;

	//lighting types:
	vec3 specLight = vec3(0.0);
	vec3 diffuseLight = vec3(0.0);

	//specular rays:
	vec3 viewDir = rayPos - camPos; //the vector from the ray position to the camera
	if(thisMaterial.specular > 0.0 && dot(viewDir, thisVoxel.normal) < 0.0 && thisMaterial.reflectType <= 1)
	{
		vec3 reflected = reflect(normalize(viewDir), thisVoxel.normal);

		for(int i = 0; i < 15; i++)
		{
			vec3 specDir = normalize(reflected * thisMaterial.shininess + spherePoints[i]) + EPSILON;
			specular_ray(mapPos, thisVoxel.normal, rayPos, specDir, thisVoxel.albedo, thisMaterial.reflectType, specLight);
		}

		specLight /= 15.0;
	}

	//diffuse and shadow rays:
	if(thisMaterial.specular < 1.0)
	{
		for(int i = 0; i < numDiffuseSamples; i++)
		{
			diffuseLight += ambientStrength;
			diffuse_ray(thisVoxel.normal + EPSILON, rayPos, thisVoxel, time * (i + 1), diffuseLight);
			shadow_ray(rayPos, time * (i + 1 + numDiffuseSamples), diffuseLight);
		}

		diffuseLight = (thisVoxel.diffuseLight * indirectSamples + diffuseLight) / (indirectSamples + numDiffuseSamples); //add to average
	}

	//clamp to avoid compression errors:
	specLight 	 = clamp(specLight,    vec3(0.0), vec3(1.0));
	diffuseLight = clamp(diffuseLight, vec3(0.0), vec3(1.0));

	//determine how to write diffuse:
	uvec3 writeDiffuseLight = uvec3(round(diffuseLight * 65535));
	uvec3 writeLower = writeDiffuseLight & 0xFF;
	uvec3 writeUpper = (writeDiffuseLight >> 8) & 0xFF;

	//store lighting:
	voxels[voxelIndex].albedo       = encode_uint_RGBA(uvec4(round(thisVoxel.albedo * 255), round(specLight.x * 255)));
	voxels[voxelIndex].specLight    = encode_uint_RGBA(uvec4(round(specLight.yz * 255) , writeUpper.x, writeLower.x));
	voxels[voxelIndex].diffuseLight = encode_uint_RGBA(uvec4(writeUpper.y, writeLower.y, writeUpper.z, writeLower.z));

	//set visible to false:
	map[mapIndex].flags &= ~4;

	//increase number of samples:
	if(voxNum == 0)
		chunks[chunkIndex].numIndirectSamples++;

	return;
}
